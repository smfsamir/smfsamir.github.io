{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","id","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPA4CeA,MAzCf,WACE,OACE,oCACI,yBAAKC,UAAU,OACf,gCACI,6BACA,gDACI,2EACA,wDACJ,+BAGJ,yBAAKC,GAAG,UACA,oDACA,4BAGI,4BAAI,wCAAJ,2CAA4D,uBAAGC,KAAK,0EAAR,8FAA5D,QAAgP,iDAAhP,mBAA0R,uBAAGA,KAAK,6DAAR,UAA1R,KAA0W,uBAAGA,KAAK,iFAAR,UAA1W,KACA,2CAAgB,wCAAhB,2CAAwE,uBAAGA,KAAK,oEAAR,oEAAxE,KAAyN,0CAAzN,IAA6O,mCAA7O,OAA4P,uBAAGA,KAAK,yBAAR,QAA5P,KACA,4BAAI,wCAAJ,2CAA4D,uBAAGA,KAAK,8EAAR,qGAA5D,QAA2P,yCAA3P,MAAgR,uBAAGA,KAAK,oFAAR,UAAhR,OAGnB,yBAAKD,GAAG,aACN,yCACA,4BACD,0EACE,4BACC,qDACA,0HAA+F,uBAAGC,KAAK,gEAAR,OAA/F,MAAgL,uBAAGA,KAAK,6DAAR,UAAhL,MAED,0EACA,4BACC,qDACA,6HCxBeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1b0439af.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n        <div className=\"App\">\n        <header>\n            <hr/>\n            <h1>S M Farhan Samir</h1>\n                <h3>PhD Student, University of British Columbia</h3>\n                <p>sm.farhan.samir@gmail.com</p>\n            <hr/>\n        </header>\n        </div>\n        <div id=\"papers\">\n                <h3>Peer-reviewed papers</h3>\n                <ul>\n                    {/* TODO: replace with links to S3*/}\n                    {/* TODO: add links to slides, posters, supplementary material, etc*/}\n                    <li><b>Samir, F.</b>, Beekhuizen, B., Stevenson, S. (2021). <a href=\"https://www.dropbox.com/s/vb47eigyodch1xv/SamirEtAlExtremeness2021.pdf\">A formidable ability: Detecting adjectival extremeness with distributional semantic models</a>. In <em>ACL 2021 Findings</em> (long paper). [<a href=\"https://github.com/smfsamir/detect-adjectival-extremeness\">GitHub</a>][<a href=\"https://www.dropbox.com/s/v46gndv0gua716q/SamirDetectingExtremenessPoster.pdf\">Poster</a>]</li> \n                    <li>Watson, J., <b>Samir, F.</b>, Beekhuizen, B., Stevenson, S. (2021). <a href=\"https://www.dropbox.com/s/fefrew2ewkzrgvh/WatsonEtAl2021VPCs.pdf\">Coin it up: Generalization of creative constructions in the wild</a>. <em>CogSci 43 </em>(<b>oral</b>). [<a href=\"https://osf.io/xn3c9/\">Data</a>]</li>\n                    <li><b>Samir, F.</b>, Beekhuizen, B., Stevenson, S. (2020). <a href=\"https://www.dropbox.com/s/bp1lurvo3vb8pjy/SamirEtAl2020Untangling.pdf?dl=0\">Untangling semantic similarity: Modelling lexical experiments with distributional semantic models</a>. In <em>CogSci 42</em>. [<a href=\"https://www.dropbox.com/s/67u79v45gccgsrv/UntanglingSemanticSimilarityPoster.pdf\">Poster</a>]</li>\n                </ul>\n        </div>\n\t<div id=\"education\">\n\t  <h3>Education</h3>\n\t  <ul>\n\t\t<li>MSc in Computer Science, 2019.09 - 2021.02</li>\n\t  \t<ul>\n\t  \t\t<li>University of Toronto</li>\n\t  \t\t<li>MSc Research paper: Detecting adjectival extremeness with distributional semantic models. [<a href=\"https://www.dropbox.com/s/ogh4f9ipk6h7d0d/SamirMScReport.pdf\">pdf</a>] [<a href=\"https://github.com/smfsamir/detect-adjectival-extremeness\">GitHub</a>]</li>\n\t  \t</ul>\n\t  \t<li>BSc in Computer Science, 2013.09 - 2018.08</li>\n\t  \t<ul>\n\t  \t\t<li>University of Toronto</li>\n\t  \t\t<li>Included 16 month Software Engineering internship (Professional Experience Year program)</li>\n\t  \t</ul>\n\t  </ul>\n\t</div>\n    </>\n  );\n    }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}